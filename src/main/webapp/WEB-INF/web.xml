<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!--
        Web集成环境通用的上下文配置
        创建完毕后会将该上下文放在ServletContext中：
            servletContext.setAttribute(
                WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,
                this.context
            );
        所以也可以使用servletContext的getAttribute方法获取该上下文
     -->
    <!--&lt;!&ndash; 添加RequestContext的监听 &ndash;&gt;-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
    <!--</listener>-->
    <!--&lt;!&ndash;-->
       <!--该监听器会在Web容器启动时创建Spring-->
    <!--&ndash;&gt;-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
    <!--</listener>-->
    <!--&lt;!&ndash; 处理由JavaBean,Introspector的使而引起的缓冲泄露 &ndash;&gt;-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>-->
    <!--</listener>-->
    <!--
        SpringMVC核心Servlet 即SpringMVC的入口
        所有的请求都会提交到该Servlet
        DispatcherServlet是前置控制器,是一个Servlet,所以可以配置多个DispatcherServlet,分别匹配不同的请求.
        1、所有请求根据映射关系由该servlet选择合适的Controller进行数据处理，
        2、处理结束后,DispatcherServlet根据返回的ModeAndView选择视图进行渲染。
    -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
        <url-pattern>*.css</url-pattern>
        <url-pattern>/img/*</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 实现了WebApplicationContext接口的类,当使用一个类来创建上下文时需要指定 -->
        <!--<param-name>contextClass</param-name>-->
        <!-- WebApplicationContext命名空间,默认为[Servlet-name]-servlet -->
        <!--<param-name>namespace</param-name>-->
        <!-- 指定web上下文的xml文件 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-*.xml</param-value>
        </init-param>
        <!-- 设置Servlet启动顺序 -->
        <load-on-startup>1</load-on-startup>
        <multipart-config>
        <max-file-size>52428800</max-file-size>
        <max-request-size>52428800</max-request-size>
        <file-size-threshold>0</file-size-threshold>
    </multipart-config>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--
        不知道何种原理,但能使用ajax的put和delete请求
    -->
    <!--<filter>-->
        <!--<filter-name>multipartFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>multipartFilter</filter-name>-->
        <!--<servlet-name>dispatcher</servlet-name>-->
    <!--</filter-mapping>-->
    <!--
        MultipartFilter是以put形式的请求上传文件的filter
        !!!必须在HiddenHttpMethodFilter
    -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <servlet-name>dispatcher</servlet-name>
    </filter-mapping>

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>